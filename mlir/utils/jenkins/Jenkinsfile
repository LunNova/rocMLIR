// ON CHANGING THESE, ALSO CHANGE Jenkinsfile.downstream
void buildProject(String target, String cmakeOpts) {
    timeout(time: 60, activity: true, unit: 'MINUTES') {
        cmakeBuild generator: 'Ninja',\
            buildDir: 'build',\
            buildType: 'RelWithDebInfo',\
            installation: 'InSearchPath',\
            steps: [[args: target]],\
            cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
              -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
              ${cmakeOpts}"""
    }
}

void buildCK(String cmakeOpts) {
    sh '[ ! -d build ] || rm -rf build'
    cmakeBuild generator: 'Unix Makefiles',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                      -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                     ${cmakeOpts}
                     """
    sh 'cd build; make -j $(nproc)'
}

void buildMIGraphX(String cmakeOpts) {
    sh '[ ! -d build ] || rm -rf build'
    cmakeBuild generator: 'Unix Makefiles',\
        buildDir: 'build',\
        buildType: 'Release',\
        installation: 'InSearchPath',\
        cmakeArgs: """-DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/clang++
                      -DCMAKE_C_COMPILER=/opt/rocm/llvm/bin/clang
                     ${cmakeOpts}
                     """
    sh 'cd build; make -j $(nproc)'
}

void getAndBuildMIGraphX(String cmakeOpts) {
    git branch: params.MIGraphXBranch, poll: false,\
        url: 'https://github.com/ROCm/AMDMIGraphX.git'
    buildMIGraphX(cmakeOpts)
}

void getAndBuildCK(String cmakeOpts) {
    git branch: params.CKBranch, poll: false,\
        url: 'https://github.com/ROCm/composable_kernel.git'
    buildCK(cmakeOpts)
}

void showEnv() {
    echo "$env.NODE_NAME"
    sh 'cat /etc/os-release'
    sh 'ulimit -a'
    // Ignore rocm-smi failures in ixt-sjc2-05
    sh '/opt/rocm/bin/rocm-smi || true'
    sh '/opt/rocm/bin/rocm_agent_enumerator'
    sh 'id'
    sh 'printenv'
}

String dockerArgs() {
    return "--device=/dev/kfd --device=/dev/dri --group-add video --group-add render -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro"
}

String dockerImage() {
    // If this is being changed please change Dockerfile.migraphx-ci's base image as well
    return 'rocm/mlir:rocm6.2-latest'
}

String dockerImageCIMIGraphX() {
    return 'rocm/mlir-migraphx-ci:rocm6.2-latest'
}

void preMergeCheck(String codepath) {
    // Only do static check on mfma codepath during PR CI
    if ( (params.nightly == false) && (codepath == "mfma") ) {
        echo "Performing Static Test (preMergeCheck)"
        sh '''
        if [ ! -f ./build/compile_commands.json ];  then
          echo "No compile commands, bailing."
          exit 1
        fi
        if [ ! -f ./compile_commands.json ]; then
          ln -s build/compile_commands.json compile_commands.json
        fi
        '''
        if (params.ignoreExternalLinting == true) {
            sh "python3 ./mlir/utils/jenkins/static-checks/premerge-checks.py --base-commit=${params.rocMLIRTargetBranch} --ignore-external"
        }
        else {
            sh "python3 ./mlir/utils/jenkins/static-checks/premerge-checks.py --base-commit=${params.rocMLIRTargetBranch}"
        }
    } else {
        echo "Static Test step skipped"
    }
}

void preMergeCheckPackage(String codepath) {
    // Only do static check on mfma codepath during PR CI
    if ( (params.nightly == false) && (codepath == "mfma") ) {
        echo "Checking if the fat library target list is accurate"
        dir('build') {
            sh '../mlir/utils/jenkins/static-checks/get_fat_library_deps_list.pl > ./librockcompiler_deps.cmake.new'
        }
        sh 'diff -up mlir/tools/rocmlir-lib/librockcompiler_deps.cmake ./build/librockcompiler_deps.cmake.new'
    } else {
        echo "Skipping fat library target list check"
    }
}

void postProcessPerfRes(String chip) {
    publishHTML (target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'build/reports',
        reportFiles: "${chip}_MLIR_Performance_Changes.html,${chip}_MLIR_vs_MIOpen.html,${chip}_MLIR_Performance_Changes_Gemm.html,${chip}_MLIR_vs_rocBLAS.html,${chip}_MLIR_vs_CK.html,${chip}_conv_fusion.html,${chip}_gemm_fusion.html",
        reportName: "Performance report for ${chip}"
    ])

  if (fileExists("build/${chip}_mlir_vs_miopen_perf_for_plot.csv")) {
    plot csvFileName: "${chip}_plot-nightly-perf-results-000001.csv",\
        csvSeries: [[file: "build/${chip}_mlir_vs_miopen_perf_for_plot.csv", displayTableFlag: false]],\
        title: "Test performance summary ${chip}, Conv",\
        yaxis: 'TFlops',\
        style: 'line',\
        group: 'Performance plots'
  }
  if (fileExists("build/${chip}_mlir_vs_rocblas_perf_for_plot.csv")) {
    plot csvFileName: "${chip}_plot-nightly-perf-results-gemm-000001.csv",\
        csvSeries: [[file: "build/${chip}_mlir_vs_rocblas_perf_for_plot.csv", displayTableFlag: false]],\
        title: "Test performance summary ${chip}, GEMM",\
        yaxis: 'TFlops',\
        style: 'line',\
        group: 'Performance plots'
  }
    // Save results for future comparison
    archiveArtifacts artifacts: 'build/*_mlir_*.csv,build/perf-run-date', allowEmptyArchive: true, onlyIfSuccessful: true
}

//Get the GPU name of architecture
def get_gpu_architecture() {
    try {
        def result = sh(script: 'rocminfo', returnStdout: true).trim()
        def arch_pattern = /Name:\s+amdgcn-amd-amdhsa--(gfx\d+\w*((:\w+[\+\-]))*)/
        def matches = (result =~ arch_pattern)
        if (matches) {
            return matches[0][1]
        }
        return 'N/A'
    } catch (Exception e) {
        echo "Error getting GPU architecture name: ${e}"
        return 'N/A'
    }
}

//makes sure multiple builds are not triggered for branch indexing
def resetBuild() {
    if (currentBuild.getPreviousBuild() == null
        || currentBuild.getPreviousBuild().getBuildCauses().toString().contains('BranchIndexingCause')) {
        def buildNumber = BUILD_NUMBER as int;
        if (buildNumber > 1)
            milestone(buildNumber - 1);
        milestone(buildNumber)
    }
}

void setHeartbeat() {
    script {
        System.setProperty("org.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL", "86400");
    }
}

String getLabelFromCodepath(String codepath) {
    echo "codepath is ${codepath}"
    if (codepath == "mfma") {
        label = 'mlir && (gfx942 || gfx908 || gfx90a)'
    } else if (codepath == "navi21") {
        // For non-performance related testing, use both workstations (gfx1030w)
        // and server nodes (gfx1030)
        label = 'mlir && ( gfx1030w || gfx1030 )'
    } else if (codepath == "vanilla"){
        label = 'mlir'
    } else if (codepath == "navi3x") {
        label = 'mlir && gfx1101'
    } else {
        echo "${codepath} is not supported"
        label = 'wrongLabel'
    }
    echo "label is ${label}"
    return label
}

String getLabelFromChip(String chip) {
    switch (chip) {
        case "gfx906":
            return getLabelFromCodepath("vanilla")
        case "gfx908":
            return "mlir && gfx908"
        case "gfx90a":
            return "mlir && gfx90a"
        case "gfx942":
            return "mlir && gfx942"
        case "gfx1030":
            // For [Tune MLIR Kernels] and [Performance report] stages,
            // fix the vm-5 workstation for testing
            return "mlir && vm-5"
        case "gfx1100":
            return "mlir && gfx1100"
        case "gfx1101":
            return "mlir && gfx1101"
    }
}

def rebootNode() {
    build job: 'maintenance/reboot-slaves', propagate: false , parameters: [string(name: 'server', value: "${env.NODE_NAME}"),]
}

void build_fixedE2ETests(String codepath) {
    // Limit the number of lit workers to 8 for navi21/navi3x codepath on nightly CI as a workaround for issue#702
    limit_lit_workers = false
    if ( (codepath == 'navi21') && (params.nightly == true) ) {
        limit_lit_workers = true
    }
    // Filter out dense_output_bf16.mlir for navi3x codepath as a workaround for issue#1023
    filter_out_tests = false
    if ( codepath == 'navi3x') {
        filter_out_tests = true
    }
    buildProject('check-mlir-build-only check-rocmlir-build-only', """
              -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=${params.nightly ? '0' : '1'}
              -DROCMLIR_DRIVER_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
              -DROCK_E2E_TEST_ENABLED=${params.nightly ? '1' : '0'}
              -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=1
              -DLLVM_LIT_ARGS='-va --time-tests ${ limit_lit_workers ? '-j 8' : ' ' } ${ filter_out_tests ? '--filter-out=dense_output_bf16.mlir' : ' '}'
              -DCMAKE_EXPORT_COMPILE_COMMANDS=1
             """)
}

void checkRocmlirOnNavi3x(boolean fixed, String testSuite) {
    sh '[ ! -d build ] || rm -rf build'
    buildProject('check-rocmlir', """
             -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=0
             -DROCMLIR_DRIVER_E2E_TEST_ENABLED=0
             -DROCK_E2E_TEST_ENABLED=1
             -DROCK_E2E_TEST_SUITES=${testSuite}
             -DROCMLIR_DRIVER_RANDOM_DATA_SEED=${fixed ? 'none' : '1'}
             -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=${fixed ? 1 : 0}
             -DLLVM_LIT_ARGS='-va --time-tests --filter-out=dense_output_bf16.mlir -j 4'
             -DCMAKE_EXPORT_COMPILE_COMMANDS=1
     """)
}


void check_RockE2ETests_Navi3x(boolean fixed) {

    // Run PR CI tests; Skip Static Test on Novi3x
    if ( params.nightly == false ) {
        buildProject('check-mlir check-rocmlir', """
                 -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=1
                 -DROCMLIR_DRIVER_E2E_TEST_ENABLED=0
                 -DROCK_E2E_TEST_ENABLED=0
                 -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=1
                 -DLLVM_LIT_ARGS='-va --time-tests --filter-out=dense_output_bf16.mlir -j 4'
                 -DCMAKE_EXPORT_COMPILE_COMMANDS=1
         """)
         echo "Static Test step skipped"
    }
    // Run nightly E2E tests in multiple smaller batches to increase the chance of successful completion
    else {
        sh '[ ! -d build ] || rm -rf build'
        buildProject('check-mlir check-rocmlir', """
             -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=0
             -DROCMLIR_DRIVER_E2E_TEST_ENABLED=1
             -DROCK_E2E_TEST_ENABLED=1
             -DROCK_E2E_TEST_SUITES='part1'
             -DROCMLIR_DRIVER_RANDOM_DATA_SEED=${fixed ? 'none' : '1'}
             -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=${fixed ? 1 : 0}
             -DLLVM_LIT_ARGS='-va --time-tests --filter-out=dense_output_bf16.mlir -j 4'
             -DCMAKE_EXPORT_COMPILE_COMMANDS=1
        """)
        checkRocmlirOnNavi3x(fixed, 'part2')
        checkRocmlirOnNavi3x(fixed, 'part3')
        checkRocmlirOnNavi3x(fixed, 'part4')
        checkRocmlirOnNavi3x(fixed, 'part5')
    }
}

void check_randomE2ETests(String codepath) {
    // Limit the number of lit workers to 8 for navi21/navi3x codepath on nightly CI as a workaround for issue#702
    limit_lit_workers = false
    if ( (codepath == 'navi21') && (params.nightly == true) ) {
        limit_lit_workers = true
    }
    buildProject('check-rocmlir', """
              -DROCMLIR_DRIVER_PR_E2E_TEST_ENABLED=0
              -DROCMLIR_DRIVER_E2E_TEST_ENABLED=1
              -DROCK_E2E_TEST_ENABLED=1
              -DROCMLIR_DRIVER_RANDOM_DATA_SEED=1
              -DROCMLIR_DRIVER_TEST_GPU_VALIDATION=0
              -DLLVM_LIT_ARGS='-va --time-tests ${ limit_lit_workers ? '-j 8' : ' ' }'
              -DCMAKE_EXPORT_COMPILE_COMMANDS=1
             """)
}

void parameterSweep(String CONFIG, String codepath) {
    timeout(time: 300, activity: true, unit: 'MINUTES') {
        dir('build') {
            sh """python3 ./bin/parameterSweeps.py -j 5 ${CONFIG}"""
        }
    }
}

boolean shouldRunFromCodepath(String codepath) {
    // Run vanilla on public CI
    if ((codepath == "vanilla") && (params.canXdlops == false)) {
        return true
    }
    // Run mfma on private CI
    if ((codepath == "mfma") && params.canXdlops) {
        return true
    }
    // Run navi21 on private nightly or weekly CI if it is not disabled
    if (params.canXdlops && (params.disableNavi21 == false) && (codepath == "navi21") &&
        (params.nightly || params.weekly)) {
        return true
    }
    // Run navi3x on private CI if it is not disabled
    if (params.canXdlops && (params.disableNavi3x == false) && (codepath == "navi3x")) {
        return true
    }
    return false
}

boolean shouldRunFromChip(String chip) {
    switch (chip) {
        default:
            return shouldRunFromCodepath("vanilla")
        case "gfx90a":
            // Special case because all our "vanilla" hosts are gfx90a.
            return params.disable90a == false &&
                   (shouldRunFromCodepath("mfma") || shouldRunFromCodepath("vanilla"))
        case "gfx908":
            return params.disable908 == false && shouldRunFromCodepath("mfma")
        case "gfx942":
            return params.disable942 == false && shouldRunFromCodepath("mfma")
        case "gfx1030":
            return shouldRunFromCodepath("navi21")
        case "gfx1100":
        case "gfx1101":
            return shouldRunFromCodepath("navi3x")
    }
}

void archivePerfDB() {
    // Note: add additional architectures here
    dir ('build/perfDB') {
        if (params.canXdlops) {
            unstash name: "MLIR-PerfDB-gfx908"
            unstash name: "MLIR-PerfDB-gfx90a"
            if (!params.disableNavi21)
                unstash name: "MLIR-PerfDB-gfx1030"
        } else {
            unstash name: "MLIR-PerfDB-vanilla"
        }
        sh 'date --utc +%Y-%m-%d >tuning-date'
    }
    archiveArtifacts artifacts: 'build/perfDB/**',\
    onlyIfSuccessful: true
}

boolean shouldRunBuildAndTest(String codepath) {
    // When default codepath is selected, we test mfma, navi21 and navi3x on
    // private CI and vanilla on public CI
    if (params.codepath == "default" && shouldRunFromCodepath(codepath))
        return true

    // When a particular codepath is selected, we only test the codepath
    // on private CI
    if (params.codepath == codepath && params.canXdlops) {
        if (params.codepath == "mfma") return true
        if (params.codepath == "vanilla") return true
        if (params.codepath == "navi21" && params.disableNavi21 == false) return true
        if (params.codepath == "navi3x" && params.disableNavi3x == false) return true
        return false
    }
}


pipeline {
    agent none
    parameters {
        // Below should be set statically by Jenkins job
        booleanParam(name: 'nightly', defaultValue: true,
                     description: 'Run extra nightly-only tests')
        booleanParam(name: 'canXdlops', defaultValue: params.canXdlops == false ? false : true,
                     description: 'Can this CI instance use xdlops (no for public server)')
        booleanParam(name: 'weekly', defaultValue: false,
                     description: 'Run weekly-only jobs')
        // Temporary change to MIGraphX branch because of upstream merge.
        string(name: 'MIGraphXBranch', defaultValue: 'develop',
               description: 'The MIGraphX branch/commit to verify against.')
        string(name: 'CKBranch', defaultValue: 'develop',
            description: 'The Composable Kernel branch to be used with the job')
        string(name: 'rocMLIRTargetBranch', defaultValue: 'origin/develop',
            description: 'The target branch the PR is intended to merge with')


        // Each below control whether to run a individual stage from parallel run
        // They default to true or empty but deverloper can toggle them for debugging purpose
        booleanParam(name: 'sharedLib', defaultValue: true,
                     description: 'Run the shared library stage')
        booleanParam(name: 'staticLib', defaultValue: true,
                     description: 'Run the static library stage')
        booleanParam(name: 'perfTest', defaultValue: true,
                     description: 'Run the performance testing stage')
        booleanParam(name: 'checkMIGraphX', defaultValue: false,
                     description: 'Run the MIGraphX integration tests')
        booleanParam(name: 'checkCK', defaultValue: true,
                     description: 'Compare performance against CK')
        booleanParam(name: 'runCodeCoverage', defaultValue: params.weekly || (!params.weekly && !params.nightly),
                     description: 'Collect and upload code-coverage info.')

        // choose the codepath for testing
        choice(name: 'codepath',
               choices: ['navi3x'],
               description: 'Choose the codepath to test')
        // option to disable navi21 cells in case nodes are offline
        booleanParam(name: 'disableNavi21', defaultValue: true,
                     description: 'Disable testing on Navi21')
        // option to disable navi3x cells in case nodes are offline
        booleanParam(name: 'disableNavi3x', defaultValue: false,
                     description: 'Disable testing on Navi3x')

        booleanParam(name: 'disable90a', defaultValue: false,
                     description: 'Disable testing on gfx90a')
        booleanParam(name: 'disable908', defaultValue: false,
                     description: 'Disable testing on gfx908')
        booleanParam(name: 'disable942', defaultValue: false,
                     description: 'Disable testing on gfx942')

        // option only to be used with upstream merges
        booleanParam(name: 'ignoreExternalLinting', defaultValue: false,
                     description: 'Ignore linting on files in external/')

        // choose the task to run in weekly
        choice(name: 'weeklyTasks',
               choices: ['default', 'parameterSweeps', 'Tuning'],
               description: 'Choose the weekly tasks')
    }
    stages {
        stage("Set System Property") {
            steps {
                setHeartbeat()
            }
        }
        stage("Kill old PR builds") {
            when {
                equals expected: false, actual: params.weekly;
                equals expected: false, actual: params.nightly;
            }
            steps {
                resetBuild()
            }
        }
        stage("Build and Test") {
            when {
                beforeAgent true
                // Skip this part of testing as early as possible
                equals expected: false, actual: params.weekly;
            }
            matrix {
                axes {
                    axis {
                        name 'CODEPATH'
                        values 'navi3x'
                    }
                }
                agent {
                    docker {
                        image dockerImage()
                        args dockerArgs()
                        label getLabelFromCodepath("${CODEPATH}")
                        alwaysPull true
                    }
                }
                when {
                    beforeAgent true
                    expression { return shouldRunBuildAndTest("$CODEPATH") }
                }
                environment {
                    PATH="/opt/rocm/llvm/bin:$PATH"
                    HOME="${WORKSPACE}"
                }
                stages {
                    stage('Environment') {
                        steps {
                            echo "codepath is ${CODEPATH}"
                            showEnv()
                        }
                    }
                    stage("Shared Library: fixed E2E tests") {
                        when {
                            beforeAgent true;
                            equals expected: true, actual: params.sharedLib;
                        }
                        steps {
                            script {
                                if ( "${CODEPATH}" == 'navi3x' ) {
                                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                        check_RockE2ETests_Navi3x(true)
                                    }
                                }
                                else {
                                    build_fixedE2ETests("${CODEPATH}")
                                    preMergeCheck("${CODEPATH}")
                                    timeout(time: 60, activity: true, unit: 'MINUTES') {
                                        sh 'cd build; ninja check-mlir check-rocmlir'
                                    }
                                }
                            }
                        }
                    }
                    stage("Shared Library: random E2E tests") {
                        when {
                            beforeAgent true;
                            allOf {
                                equals expected: true, actual: params.sharedLib;
                                equals expected: true, actual: params.nightly
                            }
                        }
                        steps {
                            script {
                                if ( "${CODEPATH}" == 'navi3x') {
                                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                        check_RockE2ETests_Navi3x(false)
                                    }
                                }
                                else
                                    check_randomE2ETests("${CODEPATH}")
                            }
                        }
                    }
                }
                post {
                    unsuccessful {
                        rebootNode()
                    }
                    always {
                        cleanWs()
                    }
                }
            }
        }
    }
}
